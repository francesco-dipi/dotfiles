#!/bin/bash

# In history, skip lines starting with a space and duplicates:
export HISTCONTROL=ignoreboth

# Aliases:

alias grep="grep --color"
alias egrep="egrep --color"
alias fgrep="fgrep --color"

alias ackj="ack-grep --java"

alias findc="find . -exec ls --color -d {} \;"

alias ls="ls --color=auto"
alias ll="ls -lAh"
# ls tree, tree is another (similar) unix command (not installed on this machine...)
alias lst="find | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"

alias fhere="find . -name " # -mmin -X to filter files modified in the last X minutes
alias fhereabs="find $(pwd) -name " # same as fhere but prints the whole absolute path

alias config="git --git-dir=$HOME/.cfg/ --work-tree=$HOME"

alias ports='netstat -tulanp'

alias psgrep="ps aux | grep "

alias fact="curl -s randomfunfacts.com | grep '#FFFFFF' |  sed  's#.*<strong><i>\(.*\)</i></strong>.*#\1#'"

# Functions:

weather() { wget -O - http://wttr.in/"${1:-rome}" -q | head -n -3; }

stopwatch() { date1=$(date +%s); while true; do echo -ne "$(date -u --date @$(($(date +%s) - date1)) +%H:%M:%S)\r"; sleep 0.1; done }

timer() { if [ $# -lt 1 ]; then echo "Usage: timer TIME [TITLE] [DESCR]"; else sleep "$1"; if [ $# -gt 1 ]; then notify-send "${@:2:2}"; else notify-send "Timer"; fi ;fi }

repeat() { if [ $# -lt 1 ]; then echo "Usage: repeat [TIMES] COMMAND"; elif [ $# -gt 1 ]; then for i in $(seq 1 "$1"); do "${@:2}"; done; else for i in {1..10}; do "$1"; done; fi ; }

highlight () { grep  -E "$1|$" "${@:2}"; }

fexec() {  if [ $# -lt 2 ]; then echo "Usage: fexec FILE_REGEX COMMAND"; else find . -iname "$1" -exec "$2" {} \;; fi }
fexecall() {  if [ $# -lt 2 ]; then echo "Usage: fexecall FILE_REGEX COMMAND"; else find . -iname "$1" -exec "$2" {} \+; fi }

vrex() { if [ $# -lt 1 ]; then echo "Usage: vrex REGEX [PATH]"; else vim +/"$1" "$(egrep -rl "$1" "${2:-.}")"; fi }
ovim() { if [ $# -lt 1 ]; then echo "Usage: ovim REGEX"; else fexec "$1" vim; fi }

# Print exit codes if errors occur.
EC() { echo -e '\n\e[0;91m'"$BASH_COMMAND_ORIGINAL": '\e[m\e[1;33m'code $?'\e[m'; }
trap EC ERR

# Print last command execution time
function timer_start {
  BASH_COMMAND_ORIGINAL=$BASH_COMMAND
  timer=${timer:-$SECONDS}
}
function timer_stop {
  timer_show=$((SECONDS - timer))
  # show label only if timer is grater than 0 seconds:
  [[ $timer_show -ge 3 ]] && timer_label="$(tput setf 3)[last: $(tput bold)${timer_show}$(tput sgr0)$(tput setf 3)s]$(tput sgr0)  " || timer_label=""
  unset timer
}
trap 'timer_start' DEBUG
PROMPT_COMMAND=timer_stop
PS1='${timer_label}${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '


